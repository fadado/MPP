#|
MPP prelude file (2)
====================

This file is imported from `_prelude.mpp`.

MACRO DEFINITION FACILITIES
---------------------------

Meta macros:

* ${define name text}
* ${defeval name text}
* ${undef name}

User macros:

* ${assign name expression}
* ${call name arg...}
* ${counter name start [increment]}
* ${defpart name file}
* ${import module}
#|#

#|######################################################################
# ${assign name expression}
#
# Assign to name the value of expression.
#|#
${define ${assign _name _expression}
    ${defeval __assign
        ~${defeval ${_name} ~${eval ${_expression}}}
    }${__assign}${undef __assign}
}

#|######################################################################
# ${call name arg...}
#
# Call an user macro by name.
#|#
${define call
    ${defeval __call
       ~${ifdef $1}~${$1 <<$2>> <<$3>> <<$4>> <<$5>> <<$6>> <<$7>> <<$8>> <<$9>>}~${endif}
    }${__call}${undef __call}
}

#|######################################################################
# ${counter name start [increment]}
#
# Define an integer generator from start by increment.
#|#
${define ${counter _name _start _inc}
    ${defeval __counter
        ~${define _${_name}_ ${_start}
        }~${define ${_name}
            ~${_${_name}_}~${assign _${_name}_
                "~${_${_name}_} + ${ifeq ;${_inc}; ;;}1${else}${_inc}${endif}"}}
    }${__counter}${undef __counter}
}

#|######################################################################
 # ${defpart name file}
 #
 # Define name as a macro with contents of file as a body.
 # Equivalent to: ${defeval name ${include file}}
#|#
${define ${defpart _name _file}
    ${defeval __defpart
        ~${defeval ${_name} ~${mode quote}~${include ${_file}}~${mode quote "~"}}
    }${__defpart}${undef __defpart}
}

#|
CONTROL FLOW FACILITIES
-----------------------

Meta macros:

* ${ifdef name}
* ${ifndef name}
* ${ifeq text1 text2}
* ${ifneq text1 text2}
* ${if test}
* ${elif test}
* ${else}
* ${endif}

User macros:

* ${for name from to by body}
* ${halt}
* ${repeat N name arg...}
* ${while test body}

Eval expressions in `if` test:

* C integer arithmetic operators
* C bitwise operators
* C logical and relational operators
* Wildcard matching
* ${defined name}
* length(text)
#|#

#|######################################################################
# ${halt}
#
# Send MPP the TERM signal.
#|#
${define halt 
    ${exec kill -s TERM ${PID}}
}

#|######################################################################
# ${repeat N name arg...}
#
# Call N times an user macro by name.
#
# First argument to macro name is the loop index (1..N).
#|#
${define repeat
    ${_repeat 1 $1 $2 $3 $4 $5 $6 $7 $8}
}

#| _repeat{i N name arg...} |#
${define _repeat
${if $1 > $2}&
${define _repeat_step}&
${else}&
${call $3 $1 $4 $5 $6 $7 $8 $9}&
${defeval _repeat_step
    ~${_repeat ${eval $1+1} $2 $3 <<$4>> <<$5>> <<$6>> <<$7>> <<$8>> <<$9>>}}&
${endif}&
${_repeat_step}&
}

#|######################################################################
# ${while test body}
#
# Iterate while test succeeds.
# Warning: nestable?
#|#
${define ${while _test _body}
${defeval _while_test ${_test}}&
${if ${_while_test}}&
${defeval _while_step
    ${_body}~${while <<${_test}>> <<${_body}>>}}&
${else}&
${define _while_step}&
${endif}&
${_while_step}&
}

#|######################################################################
# ${for name from to by body}
#
# Warning: `name` becomes a global macro.
# Warning: nestable?
#|#
${define ${for _name _from _to _by _body}
    ${assign ${_name} ${_from}
    }${_for
        '${'${_name}'}<='${_to}
        ${_body}
        '${assign '${_name}' ${'${_name}'}+'${_by}'}'
    }
}

${define ${_for _test _body _next}
${defeval _for_test ${_test}}&
${if ${_for_test}}&
${defeval _for_step ${_body}${_next}~${_for <<${_test}>> <<${_body}>> <<${_next}>>}}&
${else}&
${define _for_step}&
${endif}&
${_for_step}&
}

#|
TEXT SUBSTITUTION FACILITIES
----------------------------

Meta macros:

* ${date format}
* ${eval expression}
* ${exec command}
* ${include file}

User macros:

* ${id [text]}
* ${partial file arg...}
* ${print [text]}
#|#

#|######################################################################
# ${id [text]}
#
# Equivalent to null (${id}) and identity (${id x}).
#|#&
${define id $1}

#|######################################################################
# ${partial file arg...}
#
# Like include but passing (up to 8) parameters to the included file.
# Equivalent to: ${defpart _ file}${_ arg...}${undef _}
#|#
${define partial
    ${defeval __partial
        ~${defeval __partial
            ~${mode quote}~${include $1}~${mode quote "~"}}
    }${__partial}${__partial $2 $3 $4 $5 $6 $7 $8 $9
    }${undef __partial}
}

#|######################################################################
# ${print [text]}
#
# Output one line of text using the predefined macro $NL.
#|#
${define ${print _text}
    ${_text}${NL}
}

#|
DIAGNOSTIC FACILITIES
---------------------

Meta macros:

* ${file}
* ${line}
* ${error text}
* ${warning text}

INTERACTIVE MPP
---------------

Like TRAC?

#|#
${ifdef __IMPP__}

#|######################################################################
# ${read}
#
# Read one CR terminated line of text followed by EOF (^D on Unix, ^Z on
# MSDOS derived shells).
#|#
${define read ${exec echo -n `cat`} }

${endif}

#|
vim:ts=4:sw=4:ai:et:fileencoding=utf8:syntax=perl
#|#
